From 004f3c9c754baf3ef6a29662cbc25ec93ecb5558 Mon Sep 17 00:00:00 2001
From: Christopher Phang <christopher.phang@codethink.co.uk>
Date: Sun, 9 Aug 2020 13:53:37 +0100
Subject: [PATCH 1/3] remoteexec: provide no auth option

Currently, there is only one method for authentication
for goma server/client communication which is mandatory.
In certain scenarios this is unnecessary.

Provide an -insecure-serveraccess boolean flag (default false)
that provides a second 'authentication' option that always
permit access to the server from valid clients.
---
 auth/allow.go                | 15 +++++++++++++++
 cmd/remoteexec_proxy/main.go | 15 ++++++++++++---
 2 files changed, 27 insertions(+), 3 deletions(-)
 create mode 100644 auth/allow.go

diff --git a/auth/allow.go b/auth/allow.go
new file mode 100644
index 0000000..5e7bf07
--- /dev/null
+++ b/auth/allow.go
@@ -0,0 +1,15 @@
+package auth
+
+import (
+	"context"
+	"net/http"
+)
+
+// AllowAuth creates an authenticator that permits any access. This is used
+// for goma client/server setups that do not require any authentication.
+type AllowAuth struct{}
+
+// Auth always returns success
+func (a AllowAuth) Auth(ctx context.Context, req *http.Request) (context.Context, error) {
+	return ctx, nil
+}
diff --git a/cmd/remoteexec_proxy/main.go b/cmd/remoteexec_proxy/main.go
index f4a220c..82eafb9 100644
--- a/cmd/remoteexec_proxy/main.go
+++ b/cmd/remoteexec_proxy/main.go
@@ -69,6 +69,7 @@ var (
 	serviceAccountJSON       = flag.String("service-account-json", "", "service account json, used to talk to RBE and cloud storage (if --file-cache-bucket is used)")
 	platformContainerImage   = flag.String("platform-container-image", "", "docker uri of platform container image")
 	insecureRemoteexec       = flag.Bool("insecure-remoteexec", false, "insecure grpc for remoteexec API")
+	insecureServerAccess     = flag.Bool("insecure-serveraccess", false, "insecure access between goma client/server")
 	insecureSkipVerify       = flag.Bool("insecure-skip-verify", false, "insecure skip verifying the server certificate")
 	additionalTLSCertificate = flag.String("additional-tls-certificate", "", "additional TLS root certificate for verifying the server certificate")
 	execMaxRetryCount        = flag.Int("exec-max-retry-count", 5, "max retry count for exec call. 0 is unlimited count, but bound to ctx timtout. Use small number for powerful clients to run local fallback quickly. Use large number for powerless clients to use remote more than local.")
@@ -480,13 +481,21 @@ func main() {
 		logger.Fatal(err)
 	}
 	mux := http.DefaultServeMux
+
+	var authenticator httprpc.Auth
+	if *insecureServerAccess {
+		authenticator = auth.AllowAuth{}
+		logger.Warnf("No Authentication setup on goma server")
+	} else {
+		authenticator = &auth.Auth{
+			Client: authClient{Service: authService},
+		}
+	}
 	frontend.Register(mux, frontend.Frontend{
 		Backend: localBackend{
 			ExecService: reExecServer{re: re},
 			FileService: reFileServer{s: fileServiceClient.Service},
-			Auth: &auth.Auth{
-				Client: authClient{Service: authService},
-			},
+			Auth:        authenticator,
 		},
 	})
 
-- 
2.20.1

From 045be3d92efdb4ec732ba3a375da405b80eabe96 Mon Sep 17 00:00:00 2001
From: Christopher Phang <christopher.phang@codethink.co.uk>
Date: Sun, 9 Aug 2020 13:55:27 +0100
Subject: [PATCH 2/3] WIP: Provide example configuration

This includes platform configuration and command descriptors.

Some documentation in the README may also be of benefit.
---
 cmd/remoteexec_proxy/platform | 14 ++++++++++++++
 1 file changed, 14 insertions(+)
 create mode 100644 cmd/remoteexec_proxy/platform

diff --git a/cmd/remoteexec_proxy/platform b/cmd/remoteexec_proxy/platform
new file mode 100644
index 0000000..4b04fc4
--- /dev/null
+++ b/cmd/remoteexec_proxy/platform
@@ -0,0 +1,14 @@
+version_id: "1234"
+configs: {
+    target: {
+        addr: "localhost:8980"
+    }
+    remoteexec_platform: {
+        properties:{
+            name:"OSFamily"
+            value:"linux"
+        }
+        rbe_instance_basename:"remote-execution"
+    }
+    dimensions: "os:linux"
+}
-- 
2.20.1

From 59fbdbb83f619efd489d98168f858eaaaddddb01 Mon Sep 17 00:00:00 2001
From: Christopher Phang <christopher.phang@codethink.co.uk>
Date: Sun, 9 Aug 2020 13:58:21 +0100
Subject: [PATCH 3/3] WIP: Hardcode input root dir determination

---
 remoteexec/inputroot.go | 21 +--------------------
 1 file changed, 1 insertion(+), 20 deletions(-)

diff --git a/remoteexec/inputroot.go b/remoteexec/inputroot.go
index e6a37a0..e3a0eb6 100644
--- a/remoteexec/inputroot.go
+++ b/remoteexec/inputroot.go
@@ -235,26 +235,7 @@ func checkInputRootDir(filepath clientFilePath, dir string) error {
 // If second return value is true, chroot must be used.  It become true only
 // if `allowChroot` is true and common input root is "/".
 func inputRootDir(filepath clientFilePath, paths []string, allowChroot bool, execRootDir string) (string, bool, error) {
-	if execRootDir != "" {
-		return execRootDir, execRootDir == "/" && allowChroot, nil
-	}
-	root := commonDir(filepath, paths)
-	if needChroot(filepath, root) && allowChroot {
-		switch filepath.(type) {
-		// TODO: support non-posix platform
-		case posixpath.FilePath:
-			return "/", true, nil
-		}
-	}
-	if !validCommonDir(filepath, root) {
-		pair := getPathsWithNoCommonDir(filepath, paths)
-		return "", false, fmt.Errorf("no common paths in inputs: %v", pair)
-	}
-	err := checkInputRootDir(filepath, root)
-	if err != nil {
-		return "", false, err
-	}
-	return root, false, nil
+	return "/", false, nil
 }
 
 var errOutOfRoot = errors.New("out of root")
-- 
2.20.1

